{"version":3,"sources":["components/Header/Header.jsx","components/Song/Song.jsx","components/Playlist/Playlist.jsx","components/FavoriteSong/FavoriteSong.jsx","components/Favorites/Favorites.jsx","components/NewSong/NewSong.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","Song","song","toggleFavorite","deleteSong","_id","title","artist","time","isFavorite","seconds","Math","floor","length","onClick","Playlist","songs","map","FavoriteSong","Favorites","NewSong","useState","setTitle","setArtist","setTime","data","setData","setSong","onSubmit","event","preventDefault","newSong","console","log","axios","url","method","then","res","createdSong","catch","error","type","value","onChange","target","id","App","setSongs","useEffect","a","makeAPICall","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.172fbefc.chunk.js","sourcesContent":["import React from 'react';\r\nimport style from './Header.css'\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"headerDiv\">\r\n        <h1 className='title'>Tunr</h1>\r\n        <h2 className='tagLine'>The better app for your playlists.</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react'\nimport './Song.css'\n\nconst Song = ({ song, toggleFavorite, deleteSong }) => {\n    if(!song) song = { _id: false, title: 'unavailable', artist: 'unavailable', time: 0, isFavorite: false }\n    \n    const seconds = '' + (song.time % 60);\n    const time = Math.floor(song.time / 60) + ':' + (seconds.length===0?'00':seconds.length===1?'0'+seconds:seconds);\n\n    return (\n        <div className='song-container'>\n            <div className='song-item song-title'>{song.title}</div>\n            <div className='song-item song-artist'>{song.artist}</div>\n            <div className='song-item song-time'>{time}</div>\n            <button className={`song-button song-favorite ${song.isFavorite?'favorite':''}`} onClick={() => toggleFavorite(song._id)}>❤</button>\n            <button className='song-button song-remove' onClick={() => deleteSong(song._id)}>X</button>\n        </div>\n    )\n}\n\nexport default Song;","import React from 'react'\nimport Song from '../Song/Song'\nimport './Playlist.css'\n\nconst Playlist = ({ songs, toggleFavorite, deleteSong }) => {\n    return (\n        <>\n            <h3>Playlist</h3>\n            <div className='playlist-container'>\n            {\n                songs.map(\n                    (song) => {\n                        return <Song song={song} toggleFavorite={toggleFavorite} deleteSong={deleteSong} />\n                    }\n                )\n            }\n            </div>\n        </>\n    )\n}\nexport default Playlist;","import React from 'react'\nimport './FavoriteSong.css'\n\nconst FavoriteSong = ({ song, toggleFavorite }) => {\n    if(!song) song = { _id: false, title: 'unavailable', artist: 'unavailable', time: 0, isFavorite: false }\n    \n    const seconds = '' + (song.time % 60);\n    const time = Math.floor(song.time / 60) + ':' + (seconds.length===0?'00':seconds.length===1?'0'+seconds:seconds);\n\n    return (\n        <div className='song-container'>\n            <div className='song-item song-title'>{song.title}</div>\n            <div className='song-item song-artist'>{song.artist}</div>\n            <div className='song-item song-time'>{time}</div>\n            <button className={`song-button song-favorite ${song.isFavorite?'favorite':''}`} onClick={() => toggleFavorite(song._id)}>❤</button>\n        </div>\n    )\n}\n\nexport default FavoriteSong;","import React from 'react'\nimport FavoriteSong from '../FavoriteSong/FavoriteSong'\nimport './Favorites.css'\n\nconst Favorites = ({ songs, toggleFavorite, deleteSong }) => {\n    return (\n        <>\n            <h3>Favorite Songs</h3>\n            <div className='favorites-container'>\n            {\n                songs.map(\n                    (song) => {\n                        return <FavoriteSong song={song} toggleFavorite={toggleFavorite} deleteSong={deleteSong} />\n                    }\n                )\n            }\n            </div>\n        </>\n    )\n}\nexport default Favorites;","import React, { useState } from 'react'\r\nimport axios from 'axios'\r\n\r\n\r\n\r\nfunction NewSong() {\r\n    const [title, setTitle] = useState(\"\");\r\n    const [value, setValue] =useState(\"\")\r\n    const [artist, setArtist] = useState(\"\")\r\n    const [time, setTime] = useState(\"\")\r\n    const [data, setData] = useState([])\r\n    const [song, setSong] = useState([])\r\n\r\n    const handleTitleChange = (event) => {\r\n        setTitle(event.target.value)\r\n    }\r\n    const handleArtistChange = (event) => {\r\n        setArtist(event.target.value)\r\n    }\r\n    const handleTimeChange = (event) => {\r\n        setTime(event.target.value)\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const newSong = {\r\n            \"isFavorite\": false,\r\n            \"title\": title,\r\n            \"artist\": artist,\r\n            \"time\": time,\r\n            }\r\n            setData([...data, newSong])\r\n            console.log(newSong)\r\n            console.log('data', data)\r\n\r\n            axios({\r\n                url: `https://tunr4.herokuapp.com/api/songs/`,\r\n                method: \"POST\",\r\n                data: newSong,\r\n              })\r\n                .then((res) => {\r\n                  setSong({ createdSong: res.data });\r\n                })\r\n                .catch(console.error);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    \r\n\r\n    return(\r\n    <>\r\n        <h4>Add A New Song</h4>\r\n        <form onSubmit={handleSubmit}>  \r\n            <p>Title</p>          \r\n            <input type=\"text\" value={title} onChange={handleTitleChange} id=\"title\"/>\r\n            <br />\r\n            <p>Artist</p>          \r\n            <input type=\"text\" value={artist} onChange={handleArtistChange} id=\"artist\"/>\r\n            <br />\r\n            <p>Time</p>          \r\n            <input type=\"text\" value={time} onChange={handleTimeChange} id=\"time\"/>\r\n            <br />\r\n            <input type=\"submit\" />\r\n        </form>\r\n\r\n\r\n    </>\r\n    )\r\n}\r\n\r\nexport default NewSong","\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport Header from \"./components/Header/Header.jsx\";\nimport Playlist from './components/Playlist/Playlist'\nimport Favorites from './components/Favorites/Favorites'\nimport NewSong from './components/NewSong/NewSong.jsx'\n\n\n\n\nfunction App() {\n  const [songs, setSongs] = useState([]);\n\n  useEffect(() => {\n    const makeAPICall = async () => {\n      try {\n        const res = await axios(`https://tunr4.herokuapp.com/api/songs/`);\n        setSongs(res.data);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    makeAPICall();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Playlist songs={songs} />\n      <Favorites songs={songs.filter(song=>song.isFavorite)}/>\n      <NewSong />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}